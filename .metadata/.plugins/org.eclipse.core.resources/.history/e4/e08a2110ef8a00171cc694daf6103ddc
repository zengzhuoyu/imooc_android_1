package zuoye;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class TestDemo {

	public static void main(String[] args) {
		
//		testSong();
//		testPlayList();
//		testPlayListCollection();
//		mainMenu();
//		playListMenu();
//		playerMenu();
		test();

	}
	
	//测试歌曲
	public static void testSong() {//hashCode equals
		
		Song s1 = new Song("a001","星晴","周杰伦");
		System.out.println(s1);
	}
	
	//测试播放列表
	public static void testPlayList() {
		
		Song s1 = new Song("a001","星晴","周杰伦");
		Song s2 = new Song("a002","十年","陈奕迅");
		Song s3 = new Song("a003","妹妹你大大滴往前走","不知道");
		
		List<Song> musiclist = new ArrayList<Song>();//
		musiclist.add(s1);
		musiclist.add(s2);
		musiclist.add(s3);
		
		PlayList pl1 = new PlayList("我的收藏",musiclist);
		
		Song s4 = new Song("a004","这里的山路十八弯","还是不知道");
		pl1.addToPlayList(s4);
		System.out.println("显示播放列表中所有歌曲：");
		pl1.displayAllSong();
		System.out.println("通过id查询歌曲：");
		System.out.println(pl1.searchSongById("a001"));
		
	}
	
	//测试播放器
	public static void testPlayListCollection() {
		
		Song s1 = new Song("a001","星晴","周杰伦");
		Song s2 = new Song("a002","十年","陈奕迅");
		Song s3 = new Song("a003","妹妹你大大滴往前走","不知道");
		
		//音乐打包
		List<Song> playList = new ArrayList<Song>();
		playList.add(s1);
		playList.add(s2);
		playList.add(s3);
		
		PlayList pl1 = new PlayList("我的收藏",playList);
		
		//列表打包
		Map<String,PlayList> playListMap = new HashMap<String,PlayList>();
		playListMap.put(pl1.getPlayListName(), pl1);
		
		PlayListCollection plc1 = new PlayListCollection(playListMap);
		
		PlayList pl2 = new PlayList("我的收藏2",playList);
		plc1.addPlayList(pl2);
		
		plc1.deletePlayList(pl2);
		
		System.out.println("通过名字查询：");
		System.out.println(plc1.searchPlayListByName("我的收藏"));
		
		System.out.println("**************************");
		
		System.out.println("显示所有播放列表名称：");
		plc1.displayPlayListName();
		
	}
	
	//主菜单
	public static void mainMenu() {
		System.out.println("**************************");
		System.out.println("       **主菜单**");
		System.out.println("       1--播放列表管理");		
		System.out.println("       2--播放器管理");
		System.out.println("       0或其他数字键--退出");	
		System.out.println("**************************");
		System.out.println("请输入对应的数字进行操作：");		
	}
	
	//播放列表管理菜单
	public static void playListMenu() {
		System.out.println("**********************************");
		System.out.println("       **播放列表管理**");
		System.out.println("       1--将歌曲添加到主播放列表");		
		System.out.println("       2--将歌曲添加到普通播放列表");
		System.out.println("       3--通过歌曲id查询播放列表中的歌曲");	
		System.out.println("       4--通过歌曲名称查询播放列表中的歌曲");	
		System.out.println("       5--修改播放列表中的歌曲");	
		System.out.println("       6--删除播放列表中的歌曲");	
		System.out.println("       7--显示播放列表中的所有歌曲");	
		System.out.println("       8--导出歌单");	
		System.out.println("       9或其他数字键--返回上一级菜单");	
		System.out.println("**********************************");
		System.out.println("请输入对应的数字对播放列表进行管理：");
	}
	
	//播放器菜单
	public static void playerMenu() {
		System.out.println("**********************************");
		System.out.println("       **播放器管理**");
		System.out.println("       1--向播放器添加播放列表");		
		System.out.println("       2--从播放器删除播放列表");
		System.out.println("       3--通过名字查询播放列表信息");	
		System.out.println("       4--显示所有播放列表名称");	
		System.out.println("       9或其他数字键--返回上一级菜单");	
		System.out.println("**********************************");
		System.out.println("请输入对应的数字对播放器进行管理：");
	}
	
	//主流程
	public static void test() {
		
		Scanner sc = new Scanner(System.in);
		
		int input = 0;
		boolean flag = true;
		
		Map<String,PlayList> playListMap = new HashMap<String,PlayList>();
		PlayListCollection plcollection = new PlayListCollection(playListMap);
		
		List<Song> musiclist = new ArrayList<Song>();
		PlayList mainPlayList = new PlayList("主播放列表",musiclist);//不能赋值为null
		plcollection.addPlayList(mainPlayList);
		
		while(flag) {
			
			mainMenu();
			
			input = sc.nextInt();
			
			switch(input) {
			
				case 1:
					playList(plcollection);
					break;
					
				case 2:
					playerList(plcollection);
					break;
					
				case 0:
				default://输入错误的情况
					
					break;
			}			
		}

	} 
	
	//播放列表操作
	public static void playList(PlayListCollection plcollection) {
		
		Scanner sc = new Scanner(System.in);
		
		int input = 0;
		boolean flag = true;
		
		while(flag) {
			
			playListMenu();
			
			input = sc.nextInt();
			
			String id = null;
			String name = null;
			String singer = null;
			
			PlayList mainPlayList = plcollection.searchPlayListByName("主播放列表");
			
			switch(input) {
			
				//将歌曲添加到主播放列表
				case 1:
					System.out.println("将歌曲添加到主播放列表");
					System.out.println("请输入要添加的歌曲数量：");
					
					int mainMusicCount = sc.nextInt();
					
					for(int i = 0;i < mainMusicCount;i++) {
						System.out.println("请输入第" + (i+1) + "首歌曲：");
						System.out.println("请输入歌曲的id：");
						id = sc.next();
						System.out.println("请输入歌曲的名称：");
						name = sc.next();
						System.out.println("请输入演唱者：");
						singer = sc.next();		
						
						Song song = new Song(id,name,singer);
						
						mainPlayList.addToPlayList(song);
					}
				
					break;
					
				//将歌曲添加到普通播放列表	
				case 2:
					System.out.println("将歌曲添加到普通播放列表");
					System.out.println("请输入要添加的播放列表名称：");
					
					PlayList searchPlayList = plcollection.searchPlayListByName(sc.next());
					if(searchPlayList == null) {
						System.out.println("该播放列表不存在，请先将播放列表添加到播放器中！");
						break;
					}
					
					System.out.println("请输入要添加的歌曲数量：");
					
					int commonMusicCount = sc.nextInt();
					
					for(int i = 0;i < commonMusicCount;i++) {
						System.out.println("请输入第" + (i+1) + "首歌曲：");
						System.out.println("请输入歌曲的id：");
						id = sc.next();

						Song searchSong = mainPlayList.searchSongById(id);

						if(searchSong != null) {
							searchPlayList.addToPlayList(searchSong);
							continue;
						}

						System.out.println("该歌曲在主播放列表中不存在，继续输入歌曲的其他信息！");
						
						System.out.println("请输入歌曲的名称：");
						name = sc.next();
						System.out.println("请输入演唱者：");
						singer = sc.next();		
						
						Song song = new Song(id,name,singer);
						
						searchPlayList.addToPlayList(song);
						mainPlayList.addToPlayList(song);
					}
					
					System.out.println("主播放列表：");
					System.out.println("播放列表中的所有歌曲为：");
					mainPlayList.displayAllSong();
					
					System.out.println("普通播放列表：");
					System.out.println("播放列表中的所有歌曲为：");
					searchPlayList.displayAllSong();
					
					break;
					
				//通过歌曲id查询播放列表中的歌曲	
				case 3:
					System.out.println("通过歌曲id查询播放列表中的歌曲");
					System.out.println("请输入要查询的播放列表名称：");
					
					PlayList searchPlayListById = plcollection.searchPlayListByName(sc.next());
					
					System.out.println("请输入要查询的歌曲id：");
					Song searchSongById = searchPlayListById.searchSongById(sc.next());
					if(searchSongById == null) {
						System.out.println("该歌曲在播放列表" + searchPlayListById.getPlayListName() + "中不存在！");
						break;
					}
					System.out.println("该歌曲的信息为：");
					System.out.println(searchSongById);
					
					break;
					
				//通过歌名称查询播放列表中的歌曲	
				case 4:
					System.out.println("通过歌曲名称查询播放列表中的歌曲");
					System.out.println("请输入要查询的播放列表名称：");
					
					PlayList searchPlayListByName = plcollection.searchPlayListByName(sc.next());
					
					System.out.println("请输入要查询的歌曲名称：");
					Song searchSongByName = searchPlayListByName.searchSongByName(sc.next());
					if(searchSongByName == null) {
						System.out.println("该歌曲在播放列表" + searchPlayListByName.getPlayListName() + "中不存在！");
						break;
					}
					System.out.println("该歌曲的信息为：");
					System.out.println(searchSongByName);
					
					break;
					
				//修改播放列表中的歌曲	
				case 5:
					System.out.println("修改播放列表中的歌曲");
					System.out.println("请输入要修改的歌曲id：");
					
					id = sc.next();
					
					System.out.println("请输入修改后的歌曲名称：");
					
					name = sc.next();
					
					System.out.println("请输入修改后的演唱者：");
					
					singer = sc.next();
					
					Iterator<PlayList> itPlayLists = plcollection.getPlayListMap().values().iterator();//
					Song isFoundedSong = null;
					PlayList playListUpdate = null;
					while(itPlayLists.hasNext()) {
						playListUpdate = itPlayLists.next();
						isFoundedSong = playListUpdate.searchSongById(id);
						if(isFoundedSong != null) {
							playListUpdate.deletePlayListSong(isFoundedSong);
							playListUpdate.addToPlayList(new Song(id,name,singer));//
						}
					}
					
					System.out.println("修改成功！");

					break;
					
				//删除播放列表中的歌曲	
				case 6:
					System.out.println("删除播放列表中的歌曲");
					System.out.println("请输入要删除的歌曲id：");
					
					id = sc.next();
					
					System.out.println("请输入要删除的歌曲所在的播放列表：");
					
					String inputPlayList = sc.next();//

					if(inputPlayList.equals("主播放列表")) {

						Iterator<PlayList> itPlayListsii = plcollection.getPlayListMap().values().iterator();//
						Song isFoundedSongii = null;
						PlayList playListDelete = null;
						while(itPlayListsii.hasNext()) {
							playListDelete = itPlayListsii.next();
							isFoundedSongii = playListDelete.searchSongById(id);
							if(isFoundedSongii != null) {
								playListDelete.deletePlayListSong(isFoundedSongii);
							}
						}
						
					}else{
						
						PlayList getPlayList = plcollection.searchPlayListByName(inputPlayList);//
						
						getPlayList.deletePlayListSong(getPlayList.searchSongById(id));
					}
					
					System.out.println("删除成功！");
					
					break;
					
				//显示播放列表中的所有歌曲	
				case 7:
						System.out.println("显示播放列表中的所有歌曲");
						System.out.println("请输入要显示的播放列表名称：");
						
						PlayList displayPlayListSongs = plcollection.searchPlayListByName(sc.next());
						System.out.println("播放列表中的所有歌曲为：");
						displayPlayListSongs.displayAllSong();
						
						break;
						
				//导出歌单
				case 8:
					
					System.out.println("导出歌单");
					System.out.println("请输入要导出歌单的播放列表名称：");
					
					String inputExportPlayList = sc.next();
					PlayList exportPlayList = plcollection.searchPlayListByName(inputExportPlayList);

					try {
						FileOutputStream fos = new FileOutputStream(inputExportPlayList + ".txt");
						ObjectOutputStream oos = new ObjectOutputStream(fos);
						
						for(int i = 0;i < exportPlayList.getMusicList().size();i++) {
							oos.writeObject(exportPlayList.getMusicList().get(i));//可追加写入
						}
						
						oos.flush();
						fos.close();
						oos.close();
						
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					}
					
					System.out.println("歌单导出成功！");
					
					break;
					
				case 9:
				default:
					
					flag = false;
					break;
			}
		}

	}
		
	//播放器操作
	public static void playerList(PlayListCollection plcollection) {
		
		Scanner sc = new Scanner(System.in);
		
		int input = 0;
		boolean flag = true;
		
		while(flag) {
			
			playerMenu();
			
			input = sc.nextInt();
			
			switch(input) {
			
				//向播放器添加播放列表
				case 1:
					System.out.println("向播放器添加播放列表");
					System.out.println("输入要添加的播放列表名称：");
					
					//因为变量作用域的问题
					List<Song> commonMusiclist = new ArrayList<Song>();
					PlayList playList = new PlayList(sc.next(),commonMusiclist);//不能赋值为null
					plcollection.addPlayList(playList);
					
					break;
					
				case 2:
					break;
					
				//通过名字查询播放列表信息	
				case 3:
					System.out.println("通过名字查询播放列表信息");
					System.out.println("请输入要查询的播放列表名称：");
					
					PlayList searchPlayList = plcollection.searchPlayListByName(sc.next());
					if(searchPlayList != null) {
						System.out.println("该播放列表存在！");
						System.out.println("该播放列表的名称为：" + searchPlayList.getPlayListName());
						System.out.println("播放列表中的所有歌曲为：");
						searchPlayList.displayAllSong();
					}
					
					break;
					
				//显示所有播放列表名称					
				case 4:
					System.out.println("显示所有播放列表名称");
					System.out.println("播放列表名称为：");
					
					plcollection.displayPlayListName();
					
					break;
					
				case 9:
				default:
					
					flag = false;
					break;
			}
		}
	}
	
}
